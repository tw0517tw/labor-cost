{"version":3,"sources":["components/EmployeeSalaryForm.js","utils/findRank.js","data/healthInsuranceFee.js","components/HealthInsuranceTable.js","data/laborInsuranceFee.js","components/LaborInsuranceTable.js","data/retirePlanFee.js","components/RetirePlanTable.js","App.js","registerServiceWorker.js","index.js"],"names":["EmployeeSalaryForm","salary","updateSalary","valid","Label","htmlFor","Input","id","placeholder","value","onChange","invalid","findRank","rankArr","find","rankValue","length","company","you","boss","gov","HealthInsuranceTable","useState","familyCount","setFamilyCount","familyCountSelect","type","event","target","rankedSalary","healthInsuranceFee","totalFee","youPay","Math","round","bossPay","govPay","Table","colSpan","LaborInsuranceTable","laborInsuranceFee","RetirePlanTable","retirePlanFee","App","salaryInput","setSalaryInput","isSalaryValid","setIsSalaryValid","lastValidSalary","setLastValidSalary","Navbar","color","light","expand","NavbarBrand","Container","Row","Col","md","size","offset","eventValue","salaryNumber","Number","isNaN","isFinite","style","marginTop","className","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.25ffe301.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Input, Label } from 'reactstrap';\n\nconst EmployeeSalaryForm = ({ salary, updateSalary, valid }) => (\n  <>\n    <Label htmlFor=\"投保薪資\">投保薪資</Label>\n    <Input\n      id=\"投保薪資\"\n      placeholder=\"請輸入投保薪資\"\n      value={salary}\n      onChange={updateSalary}\n      invalid={!valid}\n    />\n  </>\n);\n\nEmployeeSalaryForm.propTypes = {\n  salary: PropTypes.string.isRequired,\n  updateSalary: PropTypes.func.isRequired,\n  valid: PropTypes.bool.isRequired,\n};\n\nexport default EmployeeSalaryForm;\n","import { find } from 'lodash';\n\nexport default function findRank(value, rankArr) {\n  return find(rankArr, (rankValue) => {\n    if (rankValue < rankArr[rankArr.length - 1]) {\n      // not last value\n      return rankValue >= value;\n    }\n    if (rankValue === rankArr[rankArr.length - 1]) {\n      // last value\n      return value >= rankValue;\n    }\n  });\n}\n","export default {\n  // start from 2021/1/1\n  rate: 0.0517,\n  // start from 2020/1/1\n  avgFamilyMember: 0.58,\n  rank: [\n    // start from 2021/1/1\n    24000, 25200, 26400, 27600, 28800, 30300, 31800, 33300, 34800, 36300, 38200,\n    40100, 42000, 43900, 45800, 48200, 50600, 53000, 55400, 57800, 60800, 63800,\n    66800, 69800, 72800, 76500, 80200, 83900, 87600, 92100, 96600, 101100,\n    105600, 110100, 115500, 120900, 126300, 131700, 137100, 142500, 147900,\n    150000, 156400, 162800, 169200, 175600, 182000,\n  ],\n  ratio: {\n    company: {\n      you: 0.3,\n      boss: 0.6,\n      gov: 0.1,\n    },\n  },\n};\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Input, Table } from 'reactstrap';\n\nimport findRank from '../utils/findRank';\nimport healthInsuranceFee from '../data/healthInsuranceFee';\n\nconst HealthInsuranceTable = ({ salary }) => {\n  const [familyCount, setFamilyCount] = useState(0);\n\n  const familyCountSelect = (\n    <Input\n      type=\"select\"\n      onChange={(event) => {\n        setFamilyCount(+event.target.value);\n      }}\n    >\n      <option value={0}>0</option>\n      <option value={1}>1</option>\n      <option value={2}>2</option>\n      <option value={3}>3或以上</option>\n    </Input>\n  );\n\n  const rankedSalary = findRank(salary, healthInsuranceFee.rank);\n  const totalFee = rankedSalary * healthInsuranceFee.rate;\n  const youPay =\n    Math.round(totalFee * healthInsuranceFee.ratio.company.you) *\n    (1 + familyCount);\n  const bossPay = Math.round(\n    totalFee *\n      healthInsuranceFee.ratio.company.boss *\n      (1 + healthInsuranceFee.avgFamilyMember)\n  );\n  const govPay = Math.round(\n    totalFee *\n      healthInsuranceFee.ratio.company.gov *\n      (1 + healthInsuranceFee.avgFamilyMember)\n  );\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th colSpan=\"2\">健保</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>投保級距</td>\n          <td>{rankedSalary}</td>\n        </tr>\n        <tr>\n          <td>扶養眷屬</td>\n          <td>{familyCountSelect}</td>\n        </tr>\n        <tr>\n          <td>個人負擔</td>\n          <td>{youPay}</td>\n        </tr>\n        <tr>\n          <td>雇主負擔</td>\n          <td>{bossPay}</td>\n        </tr>\n        <tr>\n          <td>政府負擔</td>\n          <td>{govPay}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nHealthInsuranceTable.propTypes = {\n  salary: PropTypes.number.isRequired,\n};\n\nexport default HealthInsuranceTable;\n","export default {\n  // start from 2021/1/1\n  rate: 0.115, // 0.105 Labor Insurance + 0.01 Employment Insurance\n  rank: [\n    // start from 2021/1/1\n    11100, 12540, 13500, 15840, 16500, 17280, 17880, 19047, 20008, 21009, 22000,\n    23100, 24000, 25200, 26400, 27600, 28800, 30300, 31800, 33300, 34800, 36300,\n    38200, 40100, 42000, 43900, 45800,\n  ],\n  ratio: {\n    company: {\n      you: 0.2,\n      boss: 0.7,\n      gov: 0.1,\n    },\n  },\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Table } from 'reactstrap';\n\nimport findRank from '../utils/findRank';\nimport laborInsuranceFee from '../data/laborInsuranceFee';\n\nconst LaborInsuranceTable = ({ salary }) => {\n  const rankedSalary = findRank(salary, laborInsuranceFee.rank);\n  const totalFee = rankedSalary * laborInsuranceFee.rate;\n  const youPay = Math.round(totalFee * laborInsuranceFee.ratio.company.you);\n  const bossPay = Math.round(totalFee * laborInsuranceFee.ratio.company.boss);\n  const govPay = Math.round(totalFee * laborInsuranceFee.ratio.company.gov);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th colSpan=\"2\">勞保+就保 (未包含職災費率)</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>投保級距</td>\n          <td>{rankedSalary}</td>\n        </tr>\n        <tr>\n          <td>個人負擔</td>\n          <td>{youPay}</td>\n        </tr>\n        <tr>\n          <td>雇主負擔</td>\n          <td>{bossPay}</td>\n        </tr>\n        <tr>\n          <td>政府負擔</td>\n          <td>{govPay}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nLaborInsuranceTable.propTypes = {\n  salary: PropTypes.number.isRequired,\n};\n\nexport default LaborInsuranceTable;\n","export default {\n  rate: 0.06,\n  rank: [\n    // start from 2021/1/1\n    1500, 3000, 4500, 6000, 7500, 8700, 9900, 11100, 12540, 13500, 15840, 16500,\n    17280, 17880, 19047, 20008, 21009, 22000, 23100, 24000, 25200, 26400, 27600,\n    28800, 30300, 31800, 33300, 34800, 36300, 38200, 40100, 42000, 43900, 45800,\n    48200, 50600, 53000, 55400, 57800, 60800, 63800, 66800, 69800, 72800, 76500,\n    80200, 83900, 87600, 92100, 96600, 101100, 105600, 110100, 115500, 120900,\n    126300, 131700, 137100, 142500, 147900, 150000,\n  ],\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Table } from 'reactstrap';\n\nimport findRank from '../utils/findRank';\nimport retirePlanFee from '../data/retirePlanFee';\n\nconst RetirePlanTable = ({ salary }) => {\n  const rankedSalary = findRank(salary, retirePlanFee.rank);\n  const totalFee = Math.round(rankedSalary * retirePlanFee.rate);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th colSpan=\"2\">勞退6%</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>投保級距</td>\n          <td>{rankedSalary}</td>\n        </tr>\n        <tr>\n          <td>雇主負擔</td>\n          <td>{totalFee}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nRetirePlanTable.propTypes = {\n  salary: PropTypes.number.isRequired,\n};\n\nexport default RetirePlanTable;\n","import React, { useState } from 'react';\nimport { Col, Container, Navbar, NavbarBrand, Row } from 'reactstrap';\n\nimport EmployeeSalaryForm from './components/EmployeeSalaryForm';\nimport HealthInsuranceTable from './components/HealthInsuranceTable';\nimport LaborInsuranceTable from './components/LaborInsuranceTable';\nimport RetirePlanTable from './components/RetirePlanTable';\n\nconst App = () => {\n  const [salaryInput, setSalaryInput] = useState('');\n  const [isSalaryValid, setIsSalaryValid] = useState(true);\n  const [lastValidSalary, setLastValidSalary] = useState(0);\n\n  const handleSalaryChange = (event) => {\n    const eventValue = event.target.value;\n    const salaryNumber = +eventValue;\n\n    setSalaryInput(eventValue);\n\n    if (Number.isNaN(salaryNumber) || !Number.isFinite(salaryNumber)) {\n      setIsSalaryValid(false);\n      return;\n    }\n\n    setIsSalaryValid(true);\n    setLastValidSalary(salaryNumber);\n  };\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand>勞保健保勞退</NavbarBrand>\n      </Navbar>\n      <Container>\n        <Row>\n          <Col md={{ size: 6, offset: 3 }}>\n            <EmployeeSalaryForm\n              salary={salaryInput}\n              valid={isSalaryValid}\n              updateSalary={handleSalaryChange}\n            />\n          </Col>\n        </Row>\n        <Row style={{ marginTop: '20px' }}>\n          <Col md={{ size: 4 }}>\n            <HealthInsuranceTable salary={lastValidSalary} />\n          </Col>\n          <Col md={{ size: 4 }}>\n            <LaborInsuranceTable salary={lastValidSalary} />\n          </Col>\n          <Col md={{ size: 4 }}>\n            <RetirePlanTable salary={lastValidSalary} />\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"text-center\" md={{ size: 6, offset: 3 }}>\n            <span>健保相關資料自 110年1月1日 開始適用</span>\n            <br />\n            健保資料來自\n            <a href=\"https://www.nhi.gov.tw/Content_List.aspx?n=23E61FA6B5799914&topn=5FE8C9FEAE863B46\">\n              衛福部健保署\n            </a>\n            <br />\n            <span>勞保、勞退相關資料自 110年1月1日 開始適用</span>\n            <br />\n            勞保資料來自\n            <a href=\"https://www.bli.gov.tw/0011588.html\">勞動部勞保局</a>\n            <br />\n            勞退資料來自\n            <a href=\"https://www.bli.gov.tw/0013083.html\">勞動部勞保局</a>\n            <br />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-console */\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}